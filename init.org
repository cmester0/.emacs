* What to write in the .emacs file:
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org)
  (org-babel-load-file (expand-file-name "~/Dropbox/.emacs.d/init.org"))
#+END_SRC

* Better start
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
  '(inhibit-startup-screen t))

  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files

  (setq visible-bell t) ; os / emacs sounds off

  (menu-bar-mode -1) ; Don't show menu bar
  (tool-bar-mode -1) ; Don't show tool bar

  (line-number-mode 1)   ;; Show line number
  (column-number-mode 1) ;; Show column number
#+END_SRC

* LaTeX
** AUCTEX
#+BEGIN_SRC emacs-lisp
  ;; AUC-TEX

  ;; Only change sectioning colour
  (setq font-latex-fontify-sectioning 'color)
  ;; super-/sub-script on baseline
  (setq font-latex-script-display (quote (nil)))
  ;; Do not change super-/sub-script font

  ;; Exclude bold/italic from keywords
  (setq font-latex-deactivated-keyword-classes
	'("italic-command" "bold-command" "italic-declaration" "bold-declaration"))
#+END_SRC

** BEAMER
#+BEGIN_SRC emacs-lisp
  ;; allow for export=>beamer by placing

  ;; #+LaTeX_CLASS: beamer in org files
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))
  (add-to-list 'org-export-latex-classes
    ;; beamer class, for presentations
    '("beamer"
       "\\documentclass[11pt]{beamer}\n
	\\mode<{{{beamermode}}}>\n
	\\usetheme{{{{beamertheme}}}}\n
	\\usecolortheme{{{{beamercolortheme}}}}\n
	\\beamertemplateballitem\n
	\\setbeameroption{show notes}
	\\usepackage[utf8]{inputenc}\n
	\\usepackage[T1]{fontenc}\n
	\\usepackage{hyperref}\n
	\\usepackage{color}
	\\usepackage{listings}
	\\lstset{numbers=none,language=[ISO]C++,tabsize=4,
    frame=single,
    basicstyle=\\small,
    showspaces=false,showstringspaces=false,
    showtabs=false,
    keywordstyle=\\color{blue}\\bfseries,
    commentstyle=\\color{red},
    }\n
	\\usepackage{verbatim}\n
	\\institute{{{{beamerinstitute}}}}\n          
	 \\subject{{{{beamersubject}}}}\n"

       ("\\section{%s}" . "\\section*{%s}")
     
       ("\\begin{frame}[fragile]\\frametitle{%s}"
	 "\\end{frame}"
	 "\\begin{frame}[fragile]\\frametitle{%s}"
	 "\\end{frame}")))

    ;; letter class, for formal letters

    (add-to-list 'org-export-latex-classes

    '("letter"
       "\\documentclass[11pt]{letter}\n
	\\usepackage[utf8]{inputenc}\n
	\\usepackage[T1]{fontenc}\n
	\\usepackage{color}"
     
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

** LaTeX Preview Pane
#+BEGIN_SRC emacs-lisp
  (latex-preview-pane-enable)
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-hide-block-all)

  (org-babel-do-load-languages 'org-babel-load-languages
			       '((latex . t)))

  (setq org-confirm-babel-evaluate nil) ;; Maybe bad idea

  ;; Open pdfs with evince
  (setq org-file-apps
      '(("\\.mm\\'" . default)
	("\\.x?html?\\'" . default)
	("\\.pdf\\'" . "evince %s")
	(auto-mode . emacs)))
#+END_SRC

* C/C++ coding
** Indentation
#+BEGIN_SRC emacs-lisp
  ;; C indentation

  (setq c-default-style "linux"
	c-basic-offset 2
	tab-width 2
	indent-tabs-mode t)
#+END_SRC

* Coding in general
** Code folding
#+BEGIN_SRC emacs-lisp
  ;; (defun hide()
  ;;  (interactive)
  ;;  (hs-minor-mode)
  ;;  (hs-hide-all))

  ;; (add-hook 'prog-mode-hook 'hide) ;; Run on startup /

  ;; (defadvice goto-line
  ;;    (after expand-after-goto-line activate compile)
  ;;  "hideshow-expand affected block when using goto-line in a collapsed buffer"
  ;;  (save-excursion
  ;;    (hs-show-block))) ;; Expand on goto

  ;; (setq hs-isearch-open 'x)
  ;; (global-set-key (kbd "C-+") (kbd "C-c @ C-c")) ;; Toggles hiding
#+END_SRC
  
** CEDET
*** Semantic
#+BEGIN_SRC emacs-lisp
  (require 'cc-mode)
  (require 'semantic)

  (semantic-mode 1)

  ;; (global-semantic-idle-completions-mode) ;; AUTO-COMPLETE

  (semantic-add-system-include "~/linux/kernel")
  (semantic-add-system-include "~/linux/include")

  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode) ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-show-unmatched-syntax-mode) ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode)  ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)  ;; COMMENT OUT

  (require 'semantic/ia)
  (require 'semantic/bovine/c)
  (require 'semantic/bovine/gcc)

  (setq semantic-complete-inline-analyzer-displayor-class
	'semantic-displayor-ghost)
#+END_SRC

*** EDE
#+BEGIN_SRC emacs-lisp
  (require 'ede)
  (global-ede-mode)

  (ede-cpp-root-project "In the Land of Ling"
			:file "~/Dropbox/In the land of Ling/Small project/Code/Makefile"
			:include-path '()
			:system-include-path '("~/linux"))
#+END_SRC

** Parenthesis matching
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; (global-rainbow-delimiters-mode)
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

* Looks
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'wheatgrass)
  ;; alternatives: manoj-dark  ,  tango-dark  ,  tsdh-dark  ,  wheatgrass  , wombat

  (custom-set-faces
   '(default ((t (:foreground "white"))))
   '(bold ((t (:weight bold))))
   '(italic ((t (:slant italic))))
   '(bold-italic ((t (:weight bold :slant italic))))
   '(underline ((t (:underline '(:color "Foreground Color" :style "Line")))))
   '(fixed-pitch ((t (:family "Monospace"))))
   '(variable-pitch ((t (:family "Sans Serif"))))
   '(shadow ((t (:foreground "grey70" :background "gray10")))) ;; Had no background
   '(link ((t (:underline '(:color Foreground Color :style "Line")) :foreground "cyan")))
   '(link-visited ((t (:underline '(:color "Foreground Color" :style "Line")) :foreground "dark cyan")))
   '(highlight ((t (:foreground "white" :background "dark green"))))
   '(match ((t (:background "RoyalBlue3"))))
   '(isearch ((t (:foreground "white" :background "dark goldenrod"))))
   '(lazy-highlight ((t (:background "gray25"))))
   )
#+END_SRC

** Font-lock-*
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(font-lock-comment-face ((t :foreground "gray50"))))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:foreground "green"))))
   '(org-level-2 ((t (:foreground "cyan"))))
   '(org-level-3 ((t (:foreground "white"))))
   '(org-block ((t (:inherit 'shadow))))
   '(org-default ((t (:inherit 'default))))
   '(org-block-begin-line ((t (:inherit 'org-meta-line))))
   '(org-block-end-line ((t (:inherit 'org-meta-line))))
   '(org-meta-line ((t (:inherit 'font-lock-comment-face)))))
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "red3"))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "yellow2"))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "blue3"))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "green"))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "magenta3"))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "cyan"))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "dark orange"))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "white"))))
   '(rainbow-delimiters-depth-9-face ((t (:foreground "gray"))))
   '(rainbow-delimiters-base-face ((t (:background: ""))))
   '(rainbow-delimiters-mismatched-face ((t (:foreground "blue" :inherit 'rainbow-delimiters-base-face))))
   '(rainbow-delimiters-unmatched-face ((t (:foreground "blue" :background "yellow3" :inherit 'rainbow-delimiters-base-face)))))

  ) )) (( (

#+END_SRC

* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status) ;; Shows commit status
#+END_SRC

* custom modes
** ill-mode
#+BEGIN_SRC emacs-lisp
  ;; (require 'ill-mode) 
#+END_SRC

* Buffers
#+BEGIN_SRC emacs-lisp
  ;; Make C-x k, remove the window afterwards
  (global-set-key (kbd "C-x k") (kbd "C-x 4 0"))
#+END_SRC

