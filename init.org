* What to write in the .emacs file:
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org)
  (org-babel-load-file (expand-file-name "~/Dropbox/.emacs.d/init.org"))
#+END_SRC

* Better start
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
  '(inhibit-startup-screen t))

  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files

  (setq visible-bell t) ; os / emacs sounds off

  (menu-bar-mode -1) ; Don't show menu bar
  (tool-bar-mode -1) ; Don't show tool bar

  (line-number-mode 1)   ;; Show line number
  (column-number-mode 1) ;; Show column number
#+END_SRC

* List of used packages
 - AUCTEX (for LaTeX)
 - SML-mode
 - Magit (for better git)
 - Multiple-cursors
 - Rainbow-delimiters
 - Tuareg (for ocaml coding)
 - Flycheck (syntax checking)
   - Flycheck-color-mode-line
 - Powerline
 - Company
   - company (for c,c++,...)
   - company-auctex
   - company-coq
   - company-rtags
 - Scala mode
 - Haskell-mode

TODO:
 - Flyspell

* Install missing packages
#+BEGIN_SRC emacs-lisp
  (mapcar
   (lambda (package)
     (unless (package-installed-p package)
       (package-install package)))
   '(auctex
     sml-mode
     magit
     multiple-cursors
     rainbow-delimiters
     tuareg
     flycheck
     flycheck-color-mode-line
     powerline
     company
     company-auctex
     company-coq
     company-rtags
     scala-mode
     haskell-mode))
#+END_SRC

* Looks
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'wheatgrass)
  ;; alternatives: manoj-dark  ,  tango-dark  ,  tsdh-dark  ,  wheatgrass  , wombat

  (custom-set-faces
   '(default ((t (:foreground "white"))))
   '(bold ((t (:weight bold))))
   '(italic ((t (:slant italic))))
   '(bold-italic ((t (:weight bold :slant italic))))
   '(underline ((t (:underline '(:color "Foreground Color" :style "Line")))))
   '(fixed-pitch ((t (:family "Monospace"))))
   '(variable-pitch ((t (:family "Sans Serif"))))
   '(shadow ((t (:foreground "grey70" :background "gray10")))) ;; Had no background
   '(link ((t (:underline '(:color Foreground Color :style "Line")) :foreground "cyan")))
   '(link-visited ((t (:underline '(:color "Foreground Color" :style "Line")) :foreground "dark cyan")))
   '(highlight ((t (:foreground "white" :background "dark green"))))
   '(match ((t (:background "RoyalBlue3"))))
   '(isearch ((t (:foreground "white" :background "dark goldenrod"))))
   '(lazy-highlight ((t (:background "gray25"))))
   )


  (custom-set-faces
  '(mode-line ((t (:background "grey75" :foreground "black"))))
   '(mode-line-buffer-id ((t (:weight bold))))
   '(mode-line-buffer-id-inactive ((t (:inherit 'mode-line-buffer-id))))
   '(mode-line-emphasis ((t (:weight bold))))
   '(mode-line-highlight ((t (:foreground "blue" :box (:line-width 1 :style released-button))))))
#+END_SRC

** Font-lock-*
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(font-lock-builtin-face ((t :foreground "LightSteelBlue")))
   '(font-lock-comment-delimiter-face ((t :inherit 'font-lock-comment-face)))
   '(font-lock-comment-face ((t :foreground "gray50"))) ;; gray50
   '(font-lock-constant-face ((t :foreground "sky blue"))) ;; turquoise
   '(font-lock-doc-face ((t :inherit 'font-lock-string-face)))
   '(font-lock-function-name-face ((t :foreground "cyan"))) ;; pale green
   '(font-lock-keyword-face ((t :foreground "gray70"))) ;; white
   '(font-lock-negation-char-face)
   '(font-lock-preprocessor-face ((t :inherit 'font-lock-builtin-face)))
   '(font-lock-regexp-grouping-backslash ((t :inherit 'bold)))
   '(font-lock-regexp-grouping-construct ((t :inherit 'bold)))
   '(font-lock-string-face ((t :foreground "dark khaki")))
   '(font-lock-type-face ((t :foreground "green"))) ;; aquamarine
   '(font-lock-variable-name-face ((t :foreground "yellow green"))) ;; 
   '(font-lock-warning-face ((t :inherit 'error))))
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "purple3"))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "red3"))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "orange3"))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "yellow3"))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "green3"))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "cyan3"))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "blue3"))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "magenta3"))))
   '(rainbow-delimiters-depth-9-face ((t (:foreground "DeepPink3"))))
   '(rainbow-delimiters-base-face ((t (:background: ""))))
   '(rainbow-delimiters-mismatched-face ((t (:foreground "blue" :inherit 'rainbow-delimiters-base-face))))
   '(rainbow-delimiters-unmatched-face ((t (:foreground "blue" :background "yellow3" :inherit 'rainbow-delimiters-base-face)))))
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-default-theme)

  (custom-set-faces
   '(powerline-active0 ((t (:inherit nil :foreground "white" :background "purple3"))))
   '(powerline-active1 ((t (:inherit nil :foreground "black" :background "yellow3"))))
   '(powerline-active2 ((t (:inherit nil :foreground "white" :background "DeepPink3" :distant-foreground "green"))))
   '(powerline-inactive0 ((t (:inherit nil :foreground "gray60" :background "purple4"))))
   '(powerline-inactive1 ((t (:inherit nil :foreground "gray30" :background "yellow4"))))
   '(powerline-inactive2 ((t (:inherit nil :foreground "gray50" :background "DeepPink4")))))
#+END_SRC

** Modes
*** Org mode
#+BEGIN_SRC emacs-lisp
  ;; Basics
  (custom-set-faces
   '(org-level-1 ((t (:foreground "purple1"))))
   '(org-level-2 ((t (:foreground "red1"))))
   '(org-level-3 ((t (:foreground "orange1"))))
   '(org-level-4 ((t (:foreground "yellow1"))))
   '(org-level-5 ((t (:foreground "green1"))))
   '(org-level-6 ((t (:foreground "cyan1"))))
   '(org-level-7 ((t (:foreground "blue1"))))
   '(org-level-8 ((t (:foreground "magenta1"))))
   '(org-block ((t (:inherit 'shadow))))
   '(org-default ((t (:inherit 'default))))
   '(org-block-begin-line ((t (:inherit 'org-meta-line))))
   '(org-block-end-line ((t (:inherit 'org-meta-line))))
   '(org-meta-line ((t (:inherit 'font-lock-comment-face)))))
   
			
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)

  ;; ℕ𝓟⧺×≠≥≤±¬∨∧∃∀λ⟿⟹⊥⊤⊢
  ;; specify font for '⦅' and '⦆'
  (set-fontset-font t 'unicode (font-spec :family "Noto Mono" :height 100) nil 'append)
  (set-fontset-font t '(#x2985 . #x2986) (font-spec :family "DejaVu Sans Mono" :height 10) nil 'append)
  (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family "WenQuanYi Micro Hei" :height 10) nil 'append)
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  ;; (global-flycheck-mode)

  (eval-after-load "flycheck"
    '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
#+END_SRC

* LaTeX
** AUCTEX
#+BEGIN_SRC emacs-lisp
  ;; AUC-TEX

  ;; Only change sectioning colour
  (setq font-latex-fontify-sectioning 'color)
  ;; super-/sub-script on baseline
  (setq font-latex-script-display (quote (nil)))
  ;; Do not change super-/sub-script font

  ;; Exclude bold/italic from keywords
  (setq font-latex-deactivated-keyword-classes
	'("italic-command" "bold-command" "italic-declaration" "bold-declaration"))

  ;; More recommended setup
  ;; (setq TeX-auto-save t)
  ;; (setq TeX-parse-self t)
  ;; (setq-default TeX-master nil)

  ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;; (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  ;; (setq reftex-plug-into-AUCTeX t)

  ;; Look into CDLaTeX

  ;; Preview LaTeX
  ;; (add-hook 'LaTeX-mode-hook 'preview-cache-preamble)

  (load "auctex.el" nil t t)

  (setq preview-auto-cache-preamble t)

  ;; (add-hook 'LaTeX-mode-hook (kbd "C-c C-p C-b"))

  ;; TEX ENGINE:
  ;; (setq-default TeX-engine 'xetex)
  (setq-default TeX-engine 'default)
#+END_SRC

** BEAMER
#+BEGIN_SRC emacs-lisp
  ;; allow for export=>beamer by placing

  ;; #+LaTeX_CLASS: beamer in org files
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))
  (add-to-list 'org-export-latex-classes
    ;; beamer class, for presentations
    '("beamer"
       "\\documentclass[11pt]{beamer}\n
	\\mode<{{{beamermode}}}>\n
	\\usetheme{{{{beamertheme}}}}\n
	\\usecolortheme{{{{beamercolortheme}}}}\n
	\\beamertemplateballitem\n
	\\setbeameroption{show notes}
	\\usepackage[utf8]{inputenc}\n
	\\usepackage[T1]{fontenc}\n
	\\usepackage{hyperref}\n
	\\usepackage{color}
	\\usepackage{listings}
	\\lstset{numbers=none,language=[ISO]C++,tabsize=4,
    frame=single,
    basicstyle=\\small,
    showspaces=false,showstringspaces=false,
    showtabs=false,
    keywordstyle=\\color{blue}\\bfseries,
    commentstyle=\\color{red},
    }\n
	\\usepackage{verbatim}\n
	\\institute{{{{beamerinstitute}}}}\n          
	 \\subject{{{{beamersubject}}}}\n"

       ("\\section{%s}" . "\\section*{%s}")
     
       ("\\begin{frame}[fragile]\\frametitle{%s}"
	 "\\end{frame}"
	 "\\begin{frame}[fragile]\\frametitle{%s}"
	 "\\end{frame}")))

    ;; letter class, for formal letters

    (add-to-list 'org-export-latex-classes

    '("letter"
       "\\documentclass[11pt]{letter}\n
	\\usepackage[utf8]{inputenc}\n
	\\usepackage[T1]{fontenc}\n
	\\usepackage{color}"
     
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

* Org mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-hide-block-all)

  (org-babel-do-load-languages
   'org-babel-load-languages '((latex . t)
			       (C . t)
			       (python .t )))

  (setq org-confirm-babel-evaluate nil) ;; Maybe bad idea

  (setq org-latex-to-pdf-process 
	'("xelatex -interaction nonstopmode %f"
	  "xelatex -interaction nonstopmode %f"))
#+END_SRC

* C/C++ coding
** Indentation
#+BEGIN_SRC emacs-lisp
  ;; C indentation

  (setq c-default-style "linux"
	c-basic-offset 2
	tab-width 2
	indent-tabs-mode t)
#+END_SRC

* Coding in general
** Code folding
#+BEGIN_SRC emacs-lisp
  ;; (defun hide()
  ;;  (interactive)
  ;;  (hs-minor-mode)
  ;;  (hs-hide-all))

  ;; (add-hook 'prog-mode-hook 'hide) ;; Run on startup /

  ;; (defadvice goto-line
  ;;    (after expand-after-goto-line activate compile)
  ;;  "hideshow-expand affected block when using goto-line in a collapsed buffer"
  ;;  (save-excursion
  ;;    (hs-show-block))) ;; Expand on goto

  ;; (setq hs-isearch-open 'x)
  ;; (global-set-key (kbd "C-+") (kbd "C-c @ C-c")) ;; Toggles hiding
#+END_SRC
  
** CEDET
*** Semantic
#+BEGIN_SRC emacs-lisp
  (require 'cc-mode)
  (require 'semantic)

  (semantic-mode 1)

  ;; (global-semantic-idle-completions-mode) ;; AUTO-COMPLETE

  (semantic-add-system-include "~/linux/kernel")
  (semantic-add-system-include "~/linux/include")

  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode) ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-show-unmatched-syntax-mode) ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode)  ;; COMMENT OUT
  (add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)  ;; COMMENT OUT

  (require 'semantic/ia)
  (require 'semantic/bovine/c)
  (require 'semantic/bovine/gcc)

  (setq semantic-complete-inline-analyzer-displayor-class
	'semantic-displayor-ghost)
#+END_SRC

*** EDE
#+BEGIN_SRC emacs-lisp
  (require 'ede)
  (global-ede-mode)

  (ede-cpp-root-project "In the Land of Ling"
			:file "~/Dropbox/In the land of Ling/Small project/Code/Makefile"
			:include-path '()
			:system-include-path '("~/linux"))
#+END_SRC

** Parenthesis matching
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; (global-rainbow-delimiters-mode)
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  ;; (define-key c-mode-map  [(tab)] 'company-complete)
  ;; (define-key c++-mode-map  [(tab)] 'company-complete)
#+END_SRC

* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status) ;; Shows commit status
#+END_SRC

* Custom modes
** ill-mode
#+BEGIN_SRC emacs-lisp
  ;; (require 'ill-mode) 
#+END_SRC





#+BEGIN_SRC latex
  \[
    \begin{matrix}
      a & b & c \\
      d & e & f \\
      g & h & i \\
    \end{matrix}
  \]
#+END_SRC

* Coq
#+BEGIN_SRC emacs-lisp
  (setq coq-prog-name "/home/lasse/opam-coq.8.8.2/system/bin/coqtop")
  
  ;; Load company-coq when opening Coq files
  (add-hook 'coq-mode-hook #'company-coq-mode)
#+END_SRC
  
* Display Batery Mode
#+BEGIN_SRC emacs-lisp
  (display-battery-mode 1)
#+END_SRC

* RTags
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/elpa/rtags-20180925.641/rtags.el")
  (rtags-start-process-unless-running)

  (require 'rtags)

  (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)

  (setq rtags-autostart-diagnostics t)
  (setq rtags-completions-enabled t)

  (push 'company-rtags company-backends)
#+END_SRC

* Pretty symbol modes
#+BEGIN_SRC emacs-lisp
  (defun pretty-symbols-preview-latex ()
    "make some word or string show as pretty Unicode symbols"
    (setq prettify-symbols-alist
	  (append 
	   '(("lambda" . 955) ; λ
	     ("->" . 8594) ; →
	     ("=>" . 8658) ; ⇒
	     ("<=>" . 8660) ; ⇔
	     ("\\circ" . 9702) ; ◦
	     ("|[" . 10214) ; ⟦
	     ("|]" . 10215) ; ⟧
	     ("\\[" . 9128) ; ⎨
	     ("\\]" . 9132) ; ⎬
	     ("\\(" . "(")
	     ("\\)" . ")")
	     ("\\land" . 8743) ; ∧
	     ("\\lor" . 8744) ; ∨
	     ("\\subset" . 8834) ; ⊂
	     ("\\subseteq" . 8838) ; ⊆
	     ("\\mathbb{N}" . 8469) ; ℕ
	     ("\\mathbb{R}" . 8477) ; ℝ
	     ("\\qquad" . 12061) ; ⼝
	     ("\\dots" . 8230) ; …
	     ("\\bigsqcap" . 8851) ; ⊓
	     ("\\bigsqcup" . 8852) ; ⊔
	     )
	   prettify-symbols-alist ;; tex--prettify-symbols-alist
	   )))

  ;;AUCTeX
  (add-hook 'tex-mode-hook 'pretty-symbols-preview-latex)
  (add-hook 'latex-mode-hook 'pretty-symbols-preview-latex)
  (add-hook 'LaTeX-mode-hook 'pretty-symbols-preview-latex)

  ;; Uncomment to unfold definitions when hovered:
  ; (setq prettify-symbols-unprettify-at-point t)

  (global-prettify-symbols-mode 1)
#+END_SRC
